install.packages("renv")
renv::init()
install.packages("tidyverse")
install.packages("tidymodels")
library(tidyverse)
library(tidymodels)
x_feats = c('X_Minimum', 'X_Maximum','Y_Minimum', 'Y_Maximum', 'Pixels_Areas', 'X_Perimeter', 'Y_Perimeter', 'Sum_of_Luminosity', 'Minimum_of_Luminosity', 'Maximum_of_Luminosity', 'Length_of_Conveyer', 'TypeOfSteel_A300', 'TypeOfSteel_A400', 'Steel_Plate_Thickness', 'Edges_Index', 'Empty_Index', 'Square_Index', 'Outside_X_Index', 'Edges_X_Index', 'Edges_Y_Index', 'Outside_Global_Index', 'LogOfAreas', 'Log_X_Index', 'Log_Y_Index', 'Orientation_Index', 'Luminosity_Index', 'SigmoidOfAreas')
Y_feats = c('Pastry', 'Z_Scratch', 'K_Scatch', 'Stains', 'Dirtiness', 'Bumps', 'Other_Faults')
train_df = read_csv("train.csv")
x_df = train_df %>% select(all_of(x_feats))
Y_df = train_df %>% select(all_of(Y_feats))
glimpse(train_df)
glimpse(train_df)
tidymodels_prefer()
linear_reg(penalty = 1) %>% set_engine("glmnet") %>% translate()
lm_model = linear_reg() %>%
set_engine("lm")
library(tidyverse)
library(tidymodels)
tidymodels_prefer()
train_df <- read_csv("train.csv")
glimpse(train_df)
x_feats <- c('X_Minimum', 'X_Maximum','Y_Minimum', 'Y_Maximum', 'Pixels_Areas', 'X_Perimeter', 'Y_Perimeter', 'Sum_of_Luminosity', 'Minimum_of_Luminosity', 'Maximum_of_Luminosity', 'Length_of_Conveyer', 'TypeOfSteel_A300', 'TypeOfSteel_A400', 'Steel_Plate_Thickness', 'Edges_Index', 'Empty_Index', 'Square_Index', 'Outside_X_Index', 'Edges_X_Index', 'Edges_Y_Index', 'Outside_Global_Index', 'LogOfAreas', 'Log_X_Index', 'Log_Y_Index', 'Orientation_Index', 'Luminosity_Index', 'SigmoidOfAreas')
Y_feats <- c('Pastry', 'Z_Scratch', 'K_Scatch', 'Stains', 'Dirtiness', 'Bumps', 'Other_Faults')
x_df <- train_df %>% select(all_of(x_feats))
Y_df <- train_df %>% select(all_of(Y_feats))
lm_model <- linear_reg() %>%
set_engine("lm")
lm_form_fit <- lm_model %>%
fit(Pastry ~ ., data = train_df)
lm_form_fit <- lm_model %>%
fit_xy(x_df, Y_df)
lm_form_fit <- lm_model %>%
fit_xy(x = x_df, y = Y_df)
lm_form_fit
lm_fit <- lm_model %>%
fit_xy(x = x_df, y = Y_df)
lm_fit
lm_fit %>% extract_fit_engine()
lm_fit %>% extract_fit_engine() %>% vcov()
test_df <- read_csv("test.csv")
predict(lm_fit, new_data = test_df)
predict(lm_fit, new_data = train_df)
p <- predict(lm_fit, new_data = train_df)
p == Y_df
View(p)
View(Y_df)
# set max per row to 1
p <- p %>% mutate(across(everything(), ~ifelse(.x == max(.x), 1, 0)))
View(p)
# set max per row to 1
p <- p %>% mutate(across(everything(), ~ifelse(. == max(., na.rm = TRUE), 1, 0)))
p <- predict(lm_fit, new_data = train_df)
# set max per row to 1
p <- p %>% mutate(across(everything(), ~ifelse(. == max(., na.rm = TRUE), 1, 0)))
p <- predict(lm_fit, new_data = train_df)
# set max per row to 1
p %>%
rowwise()
# set max per row to 1
p %>%
rowwise() %>%
mutate(across(everything(), ~ if_else(. == max(.), 1, 0)))
# set max per row to 1
p %>%
rowwise() %>%
mutate(max_prob = max(c_across(all_of(Y_feats))) ) %>%
# set max per row to 1
p %>%
rowwise() %>%
mutate(max_prob = max(c_across(all_of(Y_feats))) )
# set max per row to 1
p %>%
rowwise() %>%
mutate(max_prob = max(c_across()))
# set max per row to 1
p %>%
rowwise() %>%
mutate(max_prob = max(cols(Pastry:Other_Faults))) %>%
m
# set max per row to 1
p %>%
rowwise() %>%
mutate(max_prob = max(cols(Pastry:Other_Faults)))
# set max per row to 1
p %>%
rowwise() %>%
mutate(max_prob = max(cols(:)))
# set max per row to 1
p %>%
rowwise() %>%
mutate(max_prob = max(cols_only()))
names(p) <- Y_feats
p <- predict(lm_fit, new_data = train_df)
names(p) <- Y_feats
# set max per row to 1
p %>%
rowwise() %>%
mutate(max_prob = max(cols(Pastry:Other_Faults)))
